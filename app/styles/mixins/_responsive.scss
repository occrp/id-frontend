// ==========================================================================
// Responsive utilities
// ==========================================================================

// Width media queries
// ==========================================================================

// Use these mixins to respond to various widths in your layout.
//
// $flatten-at - Used to generate <=IE8 compatible stylesheets
//
// Override $flatten-at within a seperate controller to flatten all media-queries.
// A width must be given in order to keep only the relevant queries.
//
// Ex:
// $flatten-at: 960px; // Assumes most <=IE8 visitiors are fine at that width

$flatten-at: false !default;

@if ($flatten-at) and (type-of($flatten-at) != number) {
    @warn "$flatten-at must either be false or express a width in your unit of choice";
}


// Respond to min-width

@mixin respond-min ($width) {

    @if $flatten-at {
        @if $flatten-at >= $width {
            @content;
        }
    } @else {
        @media (min-width: $width) {
            @content;
        }
    }
}


// Respond to max-width

@mixin respond-max ($width) {

    @if $flatten-at {
        @if $flatten-at <= $width {
            @content;
        }
    } @else {
        @media (max-width: $width) {
            @content;
        }
    }
}


// Respond between a min & max width

@mixin respond-between ($min, $max) {

    @if $flatten-at {
        @if ($flatten-at >= $min) and ($flatten-at <= $max) {
            @content;
        }
    } @else {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }
}


@mixin respond-sq ($label) {

    @if (type-of($label) != string) {
        @warn "$query must be passed as an unquoted string";
    }

    .#{unquote($label)} {
        @content;
    }
}



// Shorthand for min/max width media queries
//
// $min - flag or value to be used as min-width
// $max - flag or value to be used as max-width
//
// Depending on which parameters are left as false, the appropriate media query
// will be included.

@mixin respond ($min: false, $max: false) {

    @if ($min == false) and ($max == false) {
        @warn "Either $min or $max must be specified.";
    }

    @if $min and $max {
        @include respond-between($min, $max) {
            @content;
        }
    } @else {
        @if $min {
            @include respond-min($min) {
                @content;
            }
        } @else {
            @include respond-max($max) {
                @content;
            }
        }
    }

}



// Retina/HiDPI media queries
// ==========================================================================

// $retina-pixel-ratio - ratio to be labeled as "retina"
//
// Typical values
// iOS: 2;
// Older Androids?: 1.5;

$retina-pixel-ratio: 2 !default;


// Based on http://www.brettjankord.com/2012/11/28/cross-browser-retinahigh-resolution-media-queries/

@mixin retina ($ratio: $retina-pixel-ratio) {
    @media
    (-webkit-min-device-pixel-ratio: $ratio),
    (min-resolution: $ratio * 96dpi) {
        @content;
    }
}